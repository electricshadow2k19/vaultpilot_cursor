AWSTemplateFormatVersion: '2010-09-09'
Description: 'VaultPilot - Complete Infrastructure Deployment'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name

Resources:
  # ==================== DynamoDB Tables ====================
  
  CredentialsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub vaultpilot-credentials-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: tenantId
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: tenantId-index
          KeySchema:
            - AttributeName: tenantId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: type-index
          KeySchema:
            - AttributeName: type
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Project
          Value: VaultPilot
        - Key: Environment
          Value: !Ref Environment

  AuditLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub vaultpilot-audit-logs-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: timestamp-index
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Project
          Value: VaultPilot
        - Key: Environment
          Value: !Ref Environment

  SettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub vaultpilot-settings-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Project
          Value: VaultPilot
        - Key: Environment
          Value: !Ref Environment

  # ==================== Cognito ====================
  
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub vaultpilot-users-${Environment}
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      UserPoolTags:
        Project: VaultPilot
        Environment: !Ref Environment

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub vaultpilot-client-${Environment}
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:3000
      LogoutURLs:
        - http://localhost:3000
      SupportedIdentityProviders:
        - COGNITO

  # ==================== S3 for Frontend ====================
  
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub vaultpilot-frontend-${Environment}-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Project
          Value: VaultPilot
        - Key: Environment
          Value: !Ref Environment

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub ${FrontendBucket.Arn}/*

  # ==================== SNS Topic ====================
  
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub vaultpilot-notifications-${Environment}
      DisplayName: VaultPilot Notifications
      Tags:
        - Key: Project
          Value: VaultPilot
        - Key: Environment
          Value: !Ref Environment

  # ==================== IAM Roles ====================
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub vaultpilot-lambda-role-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt CredentialsTable.Arn
                  - !GetAtt AuditLogsTable.Arn
                  - !GetAtt SettingsTable.Arn
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:UpdateSecret
                  - secretsmanager:CreateSecret
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecrets
                Resource: '*'
        - PolicyName: SNSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopic
        - PolicyName: IAMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListAccessKeys
                  - iam:CreateAccessKey
                  - iam:DeleteAccessKey
                  - iam:GetAccessKeyLastUsed
                  - iam:ListUsers
                Resource: '*'
      Tags:
        - Key: Project
          Value: VaultPilot
        - Key: Environment
          Value: !Ref Environment

  # ==================== CloudWatch Log Groups ====================
  
  DiscoveryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/vaultpilot-discovery-${Environment}
      RetentionInDays: 14

  RotationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/vaultpilot-rotation-${Environment}
      RetentionInDays: 14

  AuditLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/vaultpilot-audit-${Environment}
      RetentionInDays: 14

  NotifierLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/vaultpilot-notifier-${Environment}
      RetentionInDays: 14

# ==================== Outputs ====================

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub ${Environment}-UserPoolId

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub ${Environment}-UserPoolClientId

  FrontendBucketName:
    Description: S3 Frontend Bucket Name
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub ${Environment}-FrontendBucket

  FrontendURL:
    Description: Frontend Website URL
    Value: !GetAtt FrontendBucket.WebsiteURL
    Export:
      Name: !Sub ${Environment}-FrontendURL

  CredentialsTableName:
    Description: DynamoDB Credentials Table
    Value: !Ref CredentialsTable
    Export:
      Name: !Sub ${Environment}-CredentialsTable

  AuditLogsTableName:
    Description: DynamoDB Audit Logs Table
    Value: !Ref AuditLogsTable
    Export:
      Name: !Sub ${Environment}-AuditLogsTable

  SNSTopicArn:
    Description: SNS Topic ARN
    Value: !Ref NotificationTopic
    Export:
      Name: !Sub ${Environment}-SNSTopic

  LambdaExecutionRoleArn:
    Description: Lambda Execution Role ARN
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub ${Environment}-LambdaRole
